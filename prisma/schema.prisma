generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum FacilityType {
  Subdivision
  Division
}

model Facility {
  id   String @id
  name String @unique

  dotnetId   String       @unique
  dotnetType FacilityType

  roles Role[] @relation

  website      String
  contactEmail String

  createdAt       DateTime                 @default(now())
  updatedAt       DateTime                 @updatedAt
  users           UserFacilityAssignment[]
  trainingQueues  TrainingQueue[]
  certificates    Certificate[]
  resources       Resource[]
  events          Event[]
  TrainingRequest TrainingRequest[]
  TVCase          TVCase[]
}

model Role {
  facilityId String
  facility   Facility @relation(fields: [facilityId], references: [id])

  id          String   @id
  name        String
  color       String
  permissions String[]

  users UserFacilityAssignment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([facilityId, name])
}

enum FacilityAssignmentType {
  Primary
  Secondary
  DivisionalStaff
}

model UserFacilityAssignment {
  id String @id

  assignmentType FacilityAssignmentType

  userId String
  user   User   @relation(fields: [userId], references: [id])

  facilityId String
  facility   Facility @relation(fields: [facilityId], references: [id])

  roles Role[]

  case   TVCase? @relation(fields: [caseId], references: [id])
  caseId BigInt?

  @@unique([userId, facilityId, assignmentType])
}

model User {
  id          String @id
  name        String
  ratingId    Int
  ratingShort String
  ratingLong  String
  region      String
  division    String

  facilities UserFacilityAssignment[] @relation

  trainingQueues            TrainingQueueMembership[]
  recommendedTrainingQueues String[]
  completedTrainingQueues   String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  heldCertificates    Certificate[] @relation(name: "heldCertificates")
  grantedCertificates Certificate[] @relation(name: "grantedCertificates")

  receivedSessions Session[] @relation(name: "receivedSessions")
  taughtSessions   Session[] @relation(name: "taughtSessions")

  eventSignups     EventSignup[]     @relation
  eventAssignments EventAssignment[] @relation
  Connection       Connection[]      @relation

  isSiteAdmin Boolean @default(false)

  requestedSessions  TrainingRequest[]   @relation(name: "requestStudent")
  acceptedSessions   TrainingRequest[]   @relation(name: "requestInstructor")
  tvCases            TVCase[]
  tvCaseComments     TVCaseComment[]
  tvCaseStateChanges TVCaseStateChange[]
}

model AuditLogEntry {
  id        String   @id
  timestamp DateTime @default(now())
  actor     String
  item      String
  before    Json
  after     Json
  message   String
}

model TrainingQueue {
  id String @id

  facility   Facility @relation(fields: [facilityId], references: [id])
  facilityId String

  name              String
  description       String
  joinableByDefault Boolean

  members TrainingQueueMembership[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TrainingQueueMembership {
  user   User   @relation(fields: [userId], references: [id])
  userId String

  queue   TrainingQueue @relation(fields: [queueId], references: [id])
  queueId String

  joinedAt DateTime @default(now())

  @@id([userId, queueId])
  @@unique([userId, queueId])
}

model Certificate {
  id BigInt @id @default(autoincrement())

  holder   User   @relation(name: "heldCertificates", fields: [holderId], references: [id])
  holderId String

  instructor   User   @relation(name: "grantedCertificates", fields: [instructorId], references: [id])
  instructorId String

  position String // This is a restricted, standardized set of values. See src/lib/cert.ts
  expires  DateTime?

  instructorComments String

  issuedIn   Facility @relation(fields: [issuedInId], references: [id])
  issuedInId String

  createdAt DateTime @default(now())
}

model Resource {
  id String @id

  facility   Facility? @relation(fields: [facilityId], references: [id])
  facilityId String?

  isStaffOnly Boolean

  name        String
  description String
  link        String
}

enum LogType {
  Training
  CertificateRevokal
}

model Session {
  id String @id

  student   User   @relation(name: "receivedSessions", fields: [studentId], references: [id])
  studentId String

  instructor   User   @relation(name: "taughtSessions", fields: [instructorId], references: [id])
  instructorId String

  logType     LogType @default(Training)
  sessionType String

  date DateTime

  studentComments    String
  instructorComments String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Event {
  id String @id

  name String

  host   Facility @relation(fields: [hostId], references: [id])
  hostId String

  start DateTime
  end   DateTime

  description String

  bannerUrl      String
  bannerBlurHash String

  positions String[]

  public       Boolean
  allowSignups Boolean
  rosterPublic Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  signups     EventSignup[]     @relation
  assignments EventAssignment[] @relation
}

model EventSignup {
  id String @id

  event   Event  @relation(fields: [eventId], references: [id])
  eventId String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  desiredPosition String

  availableFrom DateTime
  availableTo   DateTime

  comments String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model EventAssignment {
  id String @id

  event   Event  @relation(fields: [eventId], references: [id])
  eventId String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  assignedPosition String
  positionDetails  String

  startTime DateTime
  endTime   DateTime
}

model TrainingRequest {
  id String @id

  facility   Facility @relation(fields: [facilityId], references: [id])
  facilityId String

  student   User   @relation(fields: [studentId], references: [id], name: "requestStudent")
  studentId String

  instructor   User?   @relation(fields: [instructorId], references: [id], name: "requestInstructor")
  instructorId String?

  trainingType String

  startDate DateTime
  endDate   DateTime

  availability String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Connection {
  id String @id

  user   User   @relation(fields: [userId], references: [id])
  userId String

  callsign     String
  isAuthorized Boolean

  startTime DateTime  @default(now())
  endTime   DateTime?
}

enum TVCaseType {
  Visit
  Transfer
}

enum TVCaseState {
  Pending
  InReview
  AdditionalInformationNeeded
  Rejected
  Accepted
}

model TVCase {
  id BigInt @id @default(autoincrement())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  targetFacility Facility @relation(fields: [facilityId], references: [id])
  facilityId     String

  caseType  TVCaseType
  caseState TVCaseState

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  comments            TVCaseComment[]
  stateChanges        TVCaseStateChange[]
  facilityAssignments UserFacilityAssignment[]
}

model TVCaseComment {
  id String @id

  user   User   @relation(fields: [userId], references: [id])
  userId String

  case   TVCase @relation(fields: [caseId], references: [id])
  caseId BigInt

  content String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TVCaseStateChange {
  id String @id

  user   User   @relation(fields: [userId], references: [id])
  userId String

  case   TVCase @relation(fields: [caseId], references: [id])
  caseId BigInt

  before TVCaseState
  after  TVCaseState

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
